
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xe0 shr
    dup1 __FUNC_SIG(add1) eq add1 jumpi
    0x00 0x00 revert
    add1:
        ADD1()
}

#define macro ADD1() = takes(0) returns(0) {
    0x04 calldataload // [num1]
    0x01 // [num2, num1]
    dup2 // [num1, num2, num1]
    iszero // [bool, num2, num1]
    is_zero jumpi
    dup1 // [num2, num2, num1]
    iszero
    is_zero jumpi
    dup2 // [num1, num2, num1]
    add // [result, num1]
    dup1 // [result, result, num1]
    swap2 // [num1, result, result]
    lt // [bool, result]
    is_output jumpi
    is_zero:
        add // 
    is_output:
        0x00 mstore
        0x20 0x00 return
}
